
vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    vector<int> result;    // Vector to store the result
    deque<int> dq;         // Deque to store indices of useful elements

    // Iterate through each element in the array
    for (int i = 0; i < nums.size(); i++) {
        // Remove elements that are out of this window
        if (!dq.empty() && dq.front() == i - k) {
            dq.pop_front();
        }

        // Remove elements that are smaller than the current element
        // from the back of the deque
        while (!dq.empty() && nums[dq.back()] < nums[i]) {
            dq.pop_back();
        }

        // Add the current element's index to the deque
        dq.push_back(i);

        // The first element in the deque is the largest element of
        // the current window, so add it to the result
        if (i >= k - 1) {
            result.push_back(nums[dq.front()]);
        }
    }

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int>ans;
        
        int n=nums.size();

        list<int>l;

        int i=0,j=0;

        while(j<n and i<n)
        {
            while(l.size()>0 and nums[j]>l.back())
            {
                l.pop_back();
            }

            l.push_back(nums[j]);

            if(j-i+1<k)
            {
                j++;
            }
            else if(j-i+1==k)
            {
                ans.push_back(l.front());

                if(l.front()==nums[i])
                {
                    l.pop_front();
                }

                i++;
                j++;

            }   
        }
        

        return ans;
    }
};
