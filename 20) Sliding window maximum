class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
         deque<int> dq; // store indices of elements in the window
    vector<int> result;

    for (int i = 0; i < nums.size(); ++i) {
        // Remove elements out of the current window
        while(!dq.empty() && dq.front()  <= i-k) {     //This part checks if the dq is not empty and if the front element's index (dq.front()) is no longer within the current window (i.e., it's k elements behind the current index i).
            dq.pop_front();     // If it is outside, it removes that element from the front of the dq using dq.pop_front(). This ensures the dq only holds indices of elements within the current window.
        }

        // Remove elements smaller than the current element from the back
        while (!dq.empty() && nums[dq.back()] < nums[i]) {
            dq.pop_back();
        }

        // Add current element's index to the deque
        dq.push_back(i);

        // This checks if we've processed at least k elements (the window is full). Start adding maximums to the result when the first window is fully inside the array
        if (i >= k - 1) {
            result.push_back(nums[dq.front()]);
        }
    }

    return result;
    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int>ans;
        
        int n=nums.size();

        list<int>l;

        int i=0,j=0;

        while(j<n and i<n)
        {
            while(l.size()>0 and nums[j]>l.back())
            {
                l.pop_back();
            }

            l.push_back(nums[j]);

            if(j-i+1<k)
            {
                j++;
            }
            else if(j-i+1==k)
            {
                ans.push_back(l.front());

                if(l.front()==nums[i])
                {
                    l.pop_front();
                }

                i++;
                j++;

            }   
        }
        

        return ans;
    }
};
