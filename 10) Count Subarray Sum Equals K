class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n=nums.size();
        int current_sum=0;
        int cnt=0;
        unordered_map<int,int>mp;  // HashMap to store the cumulative sum frequencies
        
        // Initialize with cumulative sum 0 having one occurrence
        mp[0]=1;

        for(int i=0;i<n;i++)
        {
            current_sum+=nums[i];  // add current number to the cumulative sum
            

            // Check if there is a cumulative sum that, when removed, results in sum k
            if(mp.find(current_sum-k)!=mp.end()) 
            {
                cnt+=mp[current_sum-k];
            }

            mp[current_sum]+=1;  // Increment the frequency of the current cumulative sum
        }
      
       return cnt;
    }
};
