class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
    
    if (k <= 1) return 0; // If k is less than or equal to 1, no products can be less than k

    int count = 0;     // Count of subarrays with product less than k
    int product = 1;   // Current product of the window
    int left = 0;      // Left boundary of the window

    // Iterate through the array with right boundary of the window
    for (int right = 0; right < nums.size(); right++) {
        product *= nums[right]; // Multiply the current element to the product

        // Shrink the window from the left until the product is less than k
        while (product >= k) {
            product /= nums[left];
            left++;
        }

        // All subarrays ending at `right` and starting from any index between
        // `left` and `right` have a product less than k
        count += right - left + 1;
    }

    return count;
    }
};
